@startuml
skinparam style strictuml
skinparam classAttributeIconSize 0
hide enum methods
hide empty members

enum model.Pawn {
    RED
    GREEN
    YELLOW
    BLUE
    BLACK
    ORANGE
    PURPLE
    PINK
    CYAN
}

class model.Round {
    - {static} attemptNumber : Integer
    - score : Integer
    + {static} setAttemptNumber(attemptNumber : Integer)
    + Round(attemptNumber : Integer, pawnNumber : Integer)
    + generateHintLine(combination : Combination) : HintLine
    + checkAttempt(combination : Combination)
    + getScore() : Integer
    - createSecretCombination(combinationLenght : Integer, pawnNumber : Integer) : Combination
}

class model.Combination {
    - {static} combinationLenght : Integer
    + Combination(pawns : Pawn[])
    + getPawns() : Pawn[]
    + setPawns(pawns : Pawn[])
}

class model.HintLine {
    + setHints(hints : Hint[])
    + getHints() : Hint[]
}

class model.AttemptLine {
    + Attempt(combination : Combination, hintLine : HintLine)
    + setCombination(combination : Combination)
    + setHintLine(hintLine : HintLine)
    + getCombination() : Combination
    + getHintLine() : HintLine

}

class model.Game {
    + startGame()
    + playRound(playerCombination : Combination)
    - nextRound()
    + getFinalScore() : Integer
}

enum model.Hint {
    RIGHT_PLACE
    WRONG_PLACE
    ABSENT
}

class model.GameSettings {
    - roundNumber : Integer
    - pawnNumber : Integer
    + getRoundNumber() : Integer
    + getPawnNumber() : Integer
}

model.Round *-> "1\n-secretCombination" model.Combination : conserve >
model.Round o--> "*\n-attempts" model.AttemptLine : constitue <
model.AttemptLine o-> "1\n-hintLine" model.HintLine : < compose
model.Round ..> "<<uses>>" model.HintLine
model.Round ..> "<<uses>>" model.Hint
model.Round ..> "<<uses>>" model.Pawn
model.HintLine o-> "4 .. 8\nhints" model.Hint : contient >
model.AttemptLine o--> "1\n-playerCombination" model.Combination : compose <
model.Game *--> "1 .. 5\n-rounds" model.Round : contient >
model.Game *--> "1\n-settings" model.GameSettings : d√©finit <
model.Combination o-> "4 .. 8\n-Pawns" model.Pawn : compose <

@enduml