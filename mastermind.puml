@startuml
skinparam style strictuml
skinparam classAttributeIconSize 0
hide enum methods
hide empty members

class controler.MastermindApp {
    + {static} main(args : String[])
}

enum model.Color {
    RED
    GREEN
    YELLOW
    BLUE
    BLACK
    ORANGE
    PURPLE
    PINK
    CYAN
}

class model.Mastermind {
    - score : Integer
    + checkColors() : bool
    + addObserver(observer : MastermindObserver)
    - notifyAttempt(hints : Color[])<
}

interface model.Hinter  <<interface>>{
    + makeHints(colors : Color[]) : Color[]
}

class controler.MastermindManager{
    + checkColors()
}

interface model.MastermindObserver <<interface>>{
    + reactToGame(hints : Color[])
}

class model.Checker {
    + checkColors() : bool
}

class view.MastermindGameWindow <<interface>> implements model.MastermindObserver{
    + reactToAttempt(hints : Color[])
    + checkColors() : bool
    + startGame()
}

class view.MastermindMenuWindow implements model.MastermindObserver{
    + reactToAttempt(hints : Color[])
    + startGame()
}

class view.MastermindEndWindow implements model.MastermindObserver{
    + reactToAttempt(hints : Color[])
    + startNewGame()
}

model.Mastermind o--> "*\\n-observers" model.MastermindObserver : Observe <
controler.MastermindManager o--> model.Mastermind
model.Mastermind o--> "*\\n-secretColors" model.Color
model.Mastermind *-l-> "1\\n-checker" model.Checker : VÃ©rifie la combinaison >
model.Mastermind *-> "1\\n-hinter" model.Hinter : Donne des indices <
controler.MastermindApp ..> "<<uses>>" model.Mastermind
controler.MastermindApp ..> "<<uses>>" view.MastermindGameWindow
controler.MastermindApp ..> "<<uses>>" view.MastermindEndWindow
controler.MastermindApp ..> "<<uses>>" view.MastermindMenuWindow
controler.MastermindApp ..> "<<uses>>" controler.MastermindManager

@enduml